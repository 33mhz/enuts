{
  "_args": [
    [
      {
        "raw": "electron-config@0.2.1",
        "scope": null,
        "escapedName": "electron-config",
        "name": "electron-config",
        "rawSpec": "0.2.1",
        "spec": "0.2.1",
        "type": "version"
      },
      "/Users/kyo5884/Desktop/enuts"
    ]
  ],
  "_from": "electron-config@0.2.1",
  "_id": "electron-config@0.2.1",
  "_inCache": true,
  "_location": "/electron-config",
  "_nodeVersion": "4.4.5",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/electron-config-0.2.1.tgz_1468336812731_0.31464701518416405"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "2.15.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "electron-config@0.2.1",
    "scope": null,
    "escapedName": "electron-config",
    "name": "electron-config",
    "rawSpec": "0.2.1",
    "spec": "0.2.1",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/electron-config/-/electron-config-0.2.1.tgz",
  "_shasum": "7e12c26412d06bf3ed3896d0479df162986b95ba",
  "_shrinkwrap": null,
  "_spec": "electron-config@0.2.1",
  "_where": "/Users/kyo5884/Desktop/enuts",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/electron-config/issues"
  },
  "dependencies": {
    "conf": "^0.11.1"
  },
  "description": "Simple config handling for your Electron app or module",
  "devDependencies": {
    "ava": "*",
    "electron-prebuilt": "^1.2.6",
    "execa": "^0.4.0",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "7e12c26412d06bf3ed3896d0479df162986b95ba",
    "tarball": "https://registry.npmjs.org/electron-config/-/electron-config-0.2.1.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "61e80b5242f147868ffcebc410838efec2bf17e0",
  "homepage": "https://github.com/sindresorhus/electron-config#readme",
  "keywords": [
    "electron",
    "app",
    "config",
    "store",
    "storage",
    "conf",
    "configuration",
    "settings",
    "preferences",
    "json",
    "data",
    "persist",
    "persistent",
    "save"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "electron-config",
  "optionalDependencies": {},
  "readme": "# electron-config [![Build Status: Linux and macOS](https://travis-ci.org/sindresorhus/electron-config.svg?branch=master)](https://travis-ci.org/sindresorhus/electron-config) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/m2m9o6gq77xxi2eg/branch/master?svg=true)](https://ci.appveyor.com/project/sindresorhus/electron-config/branch/master)\n\n> Simple config handling for your [Electron](http://electron.atom.io) app or module\n\nElectron doesn't have a built-in way to persist user settings and other data. This module handles that for you, so you can focus on building your app. Config is saved in a JSON file in [`app.getPath('userData')`](http://electron.atom.io/docs/api/app/#appgetpathname).\n\nYou can use this module directly in both the main and renderer process.\n\n\n## Install\n\n```\n$ npm install --save electron-config\n```\n\n\n## Usage\n\n```js\nconst Config = require('electron-config');\nconst config = new Config();\n\nconfig.set('unicorn', 'ðŸ¦„');\nconsole.log(config.get('unicorn'));\n//=> 'ðŸ¦„'\n\n// use dot-notation to access nested properties\nconfig.set('foo.bar', true);\nconsole.log(config.get('foo'));\n//=> {bar: true}\n\nconfig.delete('unicorn');\nconsole.log(config.get('unicorn'));\n//=> undefined\n```\n\n\n## API\n\n### Config([options])\n\nReturns a new instance.\n\n### options\n\n#### defaults\n\nType: `Object`\n\nDefault config.\n\n#### name\n\nType: `string`<br>\nDefault: `config`\n\nName of the config file (without extension).\n\nThis is useful if you want multiple config files for your app. Or if you're making a reusable Electron module that persists some config, in which case you should **not** use the name `config`.\n\n### Instance\n\nYou can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a `key` to access nested properties.\n\nThe instance is [`iterable`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols) so you can use it directly in a [`forâ€¦of`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of) loop.\n\n#### .set(key, value)\n\nSet an item.\n\n#### .set(object)\n\nSet multiple items at once.\n\n#### .get(key)\n\nGet an item.\n\n#### .has(key)\n\nCheck if an item exists.\n\n#### .delete(key)\n\nDelete an item.\n\n#### .clear()\n\nDelete all items.\n\n#### .size\n\nGet the item count.\n\n#### .store\n\nGet all the config as an object or replace the current config with an object:\n\n```js\nconf.store = {\n\thello: 'world'\n};\n```\n\n#### .path\n\nGet the path to the config file.\n\n\n## Related\n\n- [electron-debug](https://github.com/sindresorhus/electron-debug) - Adds useful debug features to your Electron app\n- [electron-context-menu](https://github.com/sindresorhus/electron-context-menu) - Context menu for your Electron app\n- [electron-dl](https://github.com/sindresorhus/electron-dl) - Simplified file downloads for your Electron app\n- [conf](https://github.com/sindresorhus/conf) - Simple config handling for your app or module\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/electron-config.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "0.2.1",
  "xo": {
    "esnext": true,
    "envs": [
      "node",
      "browser"
    ],
    "rules": {
      "import/no-extraneous-dependencies": "off"
    }
  }
}
